name: Automated Tests

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # Scheduled Unit Tests
  # ==========================================
  unit-tests:
    name: 🕐 Scheduled Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt
    
    - name: 📁 Create Test Environment
      run: |
        mkdir -p data results models tests
        python tests/create_test_data.py || echo "Using basic setup"
    
    - name: 🧪 Run Scheduled Tests
      run: |
        echo "🧪 Running scheduled tests..."
        export PYTHONPATH="$(pwd)/src:$PYTHONPATH"
        
        echo "🔍 Testing core modules..."
        modules_tested=0
        modules_passed=0
        
        echo "Testing audio_processing module..."
        if python -c "from audio_processing import DatasetAudioProcessor; print('✅ Audio processing: PASS')"; then
          modules_passed=$((modules_passed + 1))
        else
          echo "❌ Audio processing: FAIL"
        fi
        modules_tested=$((modules_tested + 1))
        
        echo "Testing disfluency_detector module..."
        if python -c "from disfluency_detector import DisfluencyDetector; print('✅ Disfluency detector: PASS')"; then
          modules_passed=$((modules_passed + 1))
        else
          echo "❌ Disfluency detector: FAIL"
        fi
        modules_tested=$((modules_tested + 1))
        
        echo "Testing model_evaluation module..."
        if python -c "from model_evaluation import ModelManager; print('✅ Model evaluation: PASS')"; then
          modules_passed=$((modules_passed + 1))
        else
          echo "❌ Model evaluation: FAIL"
        fi
        modules_tested=$((modules_tested + 1))
        
        echo "📊 Results: $modules_passed/$modules_tested modules passed"
        if [ $modules_passed -eq $modules_tested ]; then
          echo "✅ All tests passed!"
          exit 0
        else
          echo "❌ Some tests failed"
          exit 1
        fi

  # ==========================================
  # Performance Check
  # ==========================================
  performance:
    name: 📈 Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psutil
        pip install -r requirements.txt
    
    - name: 📊 Performance Check
      run: |
        echo "📊 Running performance checks..."
        export PYTHONPATH="$(pwd)/src:$PYTHONPATH"
        
        echo "💾 System Resources:"
        python -c "import psutil; print(f'CPU: {psutil.cpu_percent(interval=1):.1f}%'); print(f'Memory: {psutil.virtual_memory().percent:.1f}%')" || echo "⚠️ psutil not available"
        
        echo "⏱️ Testing ModelManager load time..."
        python -c "import time; start = time.time(); from model_evaluation import ModelManager; load_time = time.time() - start; print(f'⏱️ ModelManager load: {load_time:.3f}s'); print('✅ Performance OK' if load_time < 5.0 else '⚠️ Slow performance')" || echo "❌ Performance test failed"

  # ==========================================
  # Health Summary
  # ==========================================
  health-summary:
    name: 📋 Health Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, performance]
    if: always()
    
    steps:
    - name: 📋 Generate Report
      run: |
        echo "📋 Josh Talks Health Report"
        echo "=========================="
        echo "🕐 Date: $(date)"
        echo "🧪 Unit Tests: ${{ needs.unit-tests.result }}"
        echo "📈 Performance: ${{ needs.performance.result }}"
        echo "=========================="
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.performance.result }}" == "success" ]]; then
          echo "✅ All health checks passed!"
        else
          echo "⚠️ Some health checks failed"
        fi
