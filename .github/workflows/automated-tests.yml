name: Automated Tests

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # Scheduled Unit Tests
  # ==========================================
  unit-tests:
    name: üïê Scheduled Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        echo "Installing dependencies with fallbacks..."
        if pip install -r requirements-ci.txt; then
          echo "‚úÖ CI dependencies installed"
        elif pip install -r requirements.txt; then
          echo "‚úÖ Full dependencies installed"
        else
          echo "‚ö†Ô∏è Installing minimal dependencies"
          pip install pandas numpy transformers datasets torch librosa soundfile jiwer openpyxl || echo "‚ö†Ô∏è Some dependencies failed"
        fi
    
    - name: üìÅ Create Test Environment
      run: |
        mkdir -p data results models tests
        python tests/create_test_data.py || echo "Using basic setup"
    
    - name: üß™ Run Scheduled Tests
      run: |
        echo "üß™ Running scheduled tests..."
        export PYTHONPATH="$(pwd)/src:$(pwd):$PYTHONPATH"
        
        echo "üîç Debug: Current directory and Python path"
        pwd
        echo "PYTHONPATH: $PYTHONPATH"
        ls -la src/
        echo "Testing basic Python imports..."
        python -c "import pandas, numpy, re, unicodedata, os, json; print('‚úÖ Basic dependencies available')" || echo "‚ùå Basic dependencies missing"
        
        echo "üîç Testing core modules..."
        modules_tested=0
        modules_passed=0
        
        echo "Testing audio_processing module..."
        if python -c "import sys; sys.path.insert(0, 'src'); from audio_processing import DatasetAudioProcessor; print('‚úÖ Audio processing: PASS')"; then
          modules_passed=$((modules_passed + 1))
        else
          echo "‚ùå Audio processing: FAIL"
        fi
        modules_tested=$((modules_tested + 1))
        
        echo "Testing disfluency_detector module..."
        echo "Debug: Testing basic module import first..."
        if python -c "import sys; sys.path.insert(0, 'src'); import disfluency_detector; print('Module imported successfully')"; then
          echo "‚úÖ Module imports successfully"
          if python -c "import sys; sys.path.insert(0, 'src'); from disfluency_detector import HindiDisfluencyDetector; print('‚úÖ Disfluency detector: PASS')"; then
            modules_passed=$((modules_passed + 1))
          else
            echo "‚ùå Disfluency detector class import: FAIL"
            echo "Debug: Attempting to list available classes in disfluency_detector"
            python -c "import sys; sys.path.insert(0, 'src'); import disfluency_detector; print('Available in module:', [x for x in dir(disfluency_detector) if not x.startswith('_')])" || echo "Module listing failed"
          fi
        else
          echo "‚ùå Disfluency detector module: FAIL"
          echo "Debug: Checking if src directory contains the file..."
          ls -la src/disfluency_detector.py || echo "File not found"
        fi
        modules_tested=$((modules_tested + 1))
        
        echo "Testing model_evaluation module..."
        if python -c "import sys; sys.path.insert(0, 'src'); from model_evaluation import ModelManager; print('‚úÖ Model evaluation: PASS')"; then
          modules_passed=$((modules_passed + 1))
        else
          echo "‚ùå Model evaluation: FAIL"
        fi
        modules_tested=$((modules_tested + 1))
        
        echo "üìä Results: $modules_passed/$modules_tested modules passed"
        if [ $modules_passed -eq $modules_tested ]; then
          echo "‚úÖ All tests passed!"
          exit 0
        else
          echo "‚ùå Some tests failed"
          exit 1
        fi

  # ==========================================
  # Performance Check
  # ==========================================
  performance:
    name: üìà Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psutil
        echo "Installing dependencies with fallbacks..."
        if pip install -r requirements-ci.txt; then
          echo "‚úÖ CI dependencies installed"
        elif pip install -r requirements.txt; then
          echo "‚úÖ Full dependencies installed"
        else
          echo "‚ö†Ô∏è Installing minimal dependencies"
          pip install pandas numpy transformers datasets torch librosa soundfile jiwer openpyxl || echo "‚ö†Ô∏è Some dependencies failed"
        fi
    
    - name: üìä Performance Check
      run: |
        echo "üìä Running performance checks..."
        export PYTHONPATH="$(pwd)/src:$PYTHONPATH"
        
        echo "üíæ System Resources:"
        python -c "import psutil; print(f'CPU: {psutil.cpu_percent(interval=1):.1f}%'); print(f'Memory: {psutil.virtual_memory().percent:.1f}%')" || echo "‚ö†Ô∏è psutil not available"
        
        echo "‚è±Ô∏è Testing ModelManager load time..."
        python -c "import time; start = time.time(); from model_evaluation import ModelManager; load_time = time.time() - start; print(f'‚è±Ô∏è ModelManager load: {load_time:.3f}s'); print('‚úÖ Performance OK' if load_time < 5.0 else '‚ö†Ô∏è Slow performance')" || echo "‚ùå Performance test failed"

  # ==========================================
  # Health Summary
  # ==========================================
  health-summary:
    name: üìã Health Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, performance]
    if: always()
    
    steps:
    - name: üìã Generate Report
      run: |
        echo "üìã Josh Talks Health Report"
        echo "=========================="
        echo "üïê Date: $(date)"
        echo "üß™ Unit Tests: ${{ needs.unit-tests.result }}"
        echo "üìà Performance: ${{ needs.performance.result }}"
        echo "=========================="
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.performance.result }}" == "success" ]]; then
          echo "‚úÖ All health checks passed!"
        else
          echo "‚ö†Ô∏è Some health checks failed"
        fi
