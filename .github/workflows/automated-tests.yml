name: Automated Tests

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # Scheduled Unit Tests
  # ==========================================
  unit-tests:
    name: 🕐 Scheduled Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt
    
    - name: 📁 Create Test Environment
      run: |
        mkdir -p data results models tests
        python tests/create_test_data.py || echo "Using basic setup"
    
    - name: 🧪 Run Scheduled Tests
      run: |
        echo "🧪 Running scheduled tests..."
        python -c "
import sys, time
sys.path.append('src')

print('🔍 Testing core modules...')
modules_tested = 0
modules_passed = 0

try:
    from audio_processing import DatasetAudioProcessor
    print('✅ Audio processing: PASS')
    modules_passed += 1
except Exception as e:
    print(f'❌ Audio processing: FAIL - {e}')
modules_tested += 1

try:
    from disfluency_detector import DisfluencyDetector
    print('✅ Disfluency detector: PASS')
    modules_passed += 1
except Exception as e:
    print(f'❌ Disfluency detector: FAIL - {e}')
modules_tested += 1

try:
    from model_evaluation import ModelManager
    print('✅ Model evaluation: PASS')
    modules_passed += 1
except Exception as e:
    print(f'❌ Model evaluation: FAIL - {e}')
modules_tested += 1

print(f'📊 Results: {modules_passed}/{modules_tested} modules passed')
exit(0 if modules_passed == modules_tested else 1)
"

  # ==========================================
  # Performance Check
  # ==========================================
  performance:
    name: 📈 Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psutil
        pip install -r requirements.txt
    
    - name: 📊 Performance Check
      run: |
        echo "📊 Running performance checks..."
        python -c "
import psutil
import time
import sys

print('💾 System Resources:')
print(f'CPU: {psutil.cpu_percent(interval=1):.1f}%')
print(f'Memory: {psutil.virtual_memory().percent:.1f}%')

sys.path.append('src')
start = time.time()
try:
    from model_evaluation import ModelManager
    load_time = time.time() - start
    print(f'⏱️ ModelManager load: {load_time:.3f}s')
    if load_time < 5.0:
        print('✅ Performance OK')
    else:
        print('⚠️ Slow performance')
except Exception as e:
    print(f'❌ Performance test failed: {e}')
"

  # ==========================================
  # Health Summary
  # ==========================================
  health-summary:
    name: 📋 Health Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, performance]
    if: always()
    
    steps:
    - name: 📋 Generate Report
      run: |
        echo "📋 Josh Talks Health Report"
        echo "=========================="
        echo "🕐 Date: $(date)"
        echo "🧪 Unit Tests: ${{ needs.unit-tests.result }}"
        echo "📈 Performance: ${{ needs.performance.result }}"
        echo "=========================="
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.performance.result }}" == "success" ]]; then
          echo "✅ All health checks passed!"
        else
          echo "⚠️ Some health checks failed"
        fi